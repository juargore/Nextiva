# More documentation about how to customize your build
# can be found here:
# https://docs.fastlane.tools
fastlane_version "2.68.0"

default_platform :android

desc "Clean and run the unit tests against the Dev Release variant"
lane :tests do
    # clean the project
    gradle(task: "clean")

    # run the tests
    gradle(task: "testDevReleaseUnitTest")
end

desc "Clean, assemble, and then upload the Nightly Debug variant"
desc "`fastlane deploy_nightly seconds_since_epoch:{SECONDS_SINCE_EPOCH} store_file:{PATH_TO_KEYSTORE} store_password:{KEYSTORE_PASSWORD} key_alias:{KEY_ALIAS} key_password:{KEY_PASSWORD}`"
desc "optionals: seconds_since_epoch:{SECONDS_SINCE_EPOCH} version_name:{VERSION_NAME}"
lane :deploy_nightly do |options|
    # ensure all required parameters have been passed in
    validate_options(options)

    # deploy the Nightly variant
    deploy_variant("NightlyDebug",
                  options[:seconds_since_epoch],
                  options[:version_name],
                  options[:store_file], 
                  options[:store_password], 
                  options[:key_alias], 
                  options[:key_password], 
                  "android-testers---nightly",
                  "1:202304879978:android:936f84efb38ee7cd")

end

desc "Clean, assemble, and then upload the Deploy PR Debug variant"
desc "`fastlane deploy_pr store_file:{PATH_TO_KEYSTORE} store_password:{KEYSTORE_PASSWORD} key_alias:{KEY_ALIAS} key_password:{KEY_PASSWORD}`"
desc "optionals: seconds_since_epoch:{SECONDS_SINCE_EPOCH} version_name:{VERSION_NAME}"
lane :deploy_pr do |options|
    # ensure all required parameters have been passed in
    validate_options(options)

    # deploy the PR variant
    deploy_variant("NightlyDebug",
                  options[:seconds_since_epoch],
                  options[:version_name],
                  options[:store_file],
                  options[:store_password],
                  options[:key_alias],
                  options[:key_password],
                  "android-testers---pr",
                  "1:202304879978:android:936f84efb38ee7cd")

end

desc "Clean, assemble, and then upload the Alpha Debug variant"
desc "`fastlane deploy_alpha store_file:{PATH_TO_KEYSTORE} store_password:{KEYSTORE_PASSWORD} key_alias:{KEY_ALIAS} key_password:{KEY_PASSWORD}`"
desc "optionals: seconds_since_epoch:{SECONDS_SINCE_EPOCH} version_name:{VERSION_NAME}"
lane :deploy_alpha do |options|
    # ensure all required parameters have been passed in
    validate_options(options)

    # deploy the Alpha variant
    deploy_variant("AlphaDebug",
                  options[:seconds_since_epoch],
                  options[:version_name],
                  options[:store_file],
                  options[:store_password],
                  options[:key_alias],
                  options[:key_password],
                  "android-testers---alpha",
                  "1:202304879978:android:1b8b878af70ef80d")
end

desc "Clean, assemble, and then upload the Labs Debug variant"
desc "`fastlane deploy_labs store_file:{PATH_TO_KEYSTORE} store_password:{KEYSTORE_PASSWORD} key_alias:{KEY_ALIAS} key_password:{KEY_PASSWORD}`"
desc "optionals: seconds_since_epoch:{SECONDS_SINCE_EPOCH} version_name:{VERSION_NAME}"
lane :deploy_labs do |options|
    # ensure all required parameters have been passed in
    validate_options(options)

    # deploy the Alpha variant
    validate_options("LabsDebug",
                  options[:seconds_since_epoch],
                  options[:version_name],
                  options[:store_file],
                  options[:store_password],
                  options[:key_alias],
                  options[:key_password],
                  "android-testers---labs",
                  "1:202304879978:android:89398743fc7bb3eb")
end

desc "Clean, assemble, and then upload the RC Debug variant"
desc "`fastlane deploy_rc store_file:{PATH_TO_KEYSTORE} store_password:{KEYSTORE_PASSWORD} key_alias:{KEY_ALIAS} key_password:{KEY_PASSWORD}`"
desc "optionals: seconds_since_epoch:{SECONDS_SINCE_EPOCH} version_name:{VERSION_NAME}"
lane :deploy_rc do |options|
    # ensure all required parameters have been passed in
    validate_options(options)

    # deploy the RC variant
    deploy_variant("RCDebug",
                  options[:seconds_since_epoch],
                  options[:version_name],
                  options[:store_file],
                  options[:store_password],
                  options[:key_alias],
                  options[:key_password],
                  "android-testers---rc",
                  "1:202304879978:android:cf34f8660361d7cc")
end

desc "Clean, assemble, and then upload the Prod Release variant"
desc "`fastlane deploy_prod store_file:{PATH_TO_KEYSTORE} store_password:{KEYSTORE_PASSWORD} key_alias:{KEY_ALIAS} key_password:{KEY_PASSWORD}`"
desc "optionals: seconds_since_epoch:{SECONDS_SINCE_EPOCH} version_name:{VERSION_NAME}"
lane :deploy_prod do |options|
    # ensure all required parameters have been passed in
    validate_options(options)

    # deploy the Prod variant
    deploy_variant("ProdRelease",
                  options[:seconds_since_epoch],
                  options[:version_name],
                  options[:store_file],
                  options[:store_password],
                  options[:key_alias],
                  options[:key_password],
                  "android-testers---prod",
                  "1:202304879978:android:8c9ad97cd31cb0d8")


    upload_to_play_store
end

desc "Clean and assemble a build for veracode"
desc "`fastlane veracode seconds_since_epoch:{SECONDS_SINCE_EPOCH} store_file:{PATH_TO_KEYSTORE} store_password:{KEYSTORE_PASSWORD} key_alias:{KEY_ALIAS} key_password:{KEY_PASSWORD}`"
desc "optionals: seconds_since_epoch:{SECONDS_SINCE_EPOCH} version_name:{VERSION_NAME}"
lane :veracode do |options|
    # ensure all required parameters have been passed in
    validate_options(options)

    # deploy the RC variant
    build_variant("RCDebug",
                  options[:seconds_since_epoch],
                  options[:version_name],
                  options[:store_file],
                  options[:store_password],
                  options[:key_alias],
                  options[:key_password])
end

desc "Validates the required parameters are included in the options"
desc "options - The dictionary containing the parameters"
def validate_options(options = nil)

    # require store_file variable to be set
    unless options[:store_file]
        UI.user_error!("store_file not set.  Exiting")
    end

    # require store_password variable to be set
    unless options[:store_password]
        UI.user_error!("store_password not set.  Exiting")
    end

    # require key_alias variable to be set
    unless options[:key_alias]
        UI.user_error!("key_alias not set.  Exiting")
    end

    # require key_password variable to be set
    unless options[:key_password]
        UI.user_error!("key_password not set.  Exiting")
    end
end

desc "Builds the variant for the specified build type"
desc "build_type - The build type to assemble"
desc "seconds_since_epoch - The seconds since epoch, to be used as the versionCode"
desc "store_file - Path to the keystore file"
desc "store_password - Password to the keystore"
desc "key_alias - Alias within the keystore to use"
desc "key_password - Password to the alias"
def build_variant(build_type = nil,
                  seconds_since_epoch = nil,
                  version_name = nil,
                  store_file = nil,
                  store_password = nil,
                  key_alias = nil,
                  key_password = nil)

    # clean the project
    gradle(task: "clean")


    # build the specified variant
    assemble_variant(build_type,
        seconds_since_epoch,
        version_name,
        store_file,
        store_password,
        key_alias,
        key_password)
end

desc "Deploys the variant for the specified build type"
desc "build_type - The build type to assemble"
desc "seconds_since_epoch - The seconds since epoch, to be used as the versionCode"
desc "store_file - Path to the keystore file"
desc "store_password - Password to the keystore"
desc "key_alias - Alias within the keystore to use"
desc "key_password - Password to the alias"
desc "group - The Crashlytics group to be notified when the build has been uploaded"
def deploy_variant(build_type = nil,
                   seconds_since_epoch = nil,
                   version_name = nil,
                   store_file = nil,
                   store_password = nil,
                   key_alias = nil,
                   key_password = nil,
                   group = nil,
                   app_id = nil)

    # clean the project
    gradle(task: "clean")

    # References
    # https://firebase.google.com/docs/app-distribution/android/distribute-fastlane#service-acc-fastlane
    # https://firebase.google.com/docs/cli#cli-ci-systems
    firebase_token = "1//05C3l6t0xqoj3CgYIARAAGAUSNwF-L9IrrcV_a4McH0OWlTRgm6zWFkx4W2yqniur8CfWt9rWFGPO15dvmIUXPglYGPLbax0WYcQ"

    # build the specified variant
    assemble_variant(build_type,
                     seconds_since_epoch,
                     version_name,
                     store_file,
                     store_password,
                     key_alias,
                     key_password)

    desc "Uploads the built variant to Firebase App Distribution"
        firebase_app_distribution(
            app: app_id,
            groups: group,
            release_notes: build_type,
            firebase_cli_token: firebase_token
            )
end


desc "Builds the variant for the specified build type"
desc "build_type - The build type to assemble"
desc "seconds_since_epoch - The seconds since epoch, to be used as the versionCode"
desc "store_file - Path to the keystore file"
desc "store_password - Password to the keystore"
desc "key_alias - Alias within the keystore to use"
desc "key_password - Password to the alias"
def assemble_variant(build_type = nil,
                     seconds_since_epoch = nil,
                     version_name = nil,
                     store_file = nil,
                     store_password = nil,
                     key_alias = nil,
                     key_password = nil)

    # gradle task property variables
    if version_name != nil
        properties = {
            "android.injected.signing.store.file" => store_file,
            "android.injected.signing.store.password" => store_password,
            "android.injected.signing.key.alias" => key_alias,
            "android.injected.signing.key.password" => key_password,
            "versionCode" => seconds_since_epoch,
            "versionName" => version_name
        }
    else
        properties = {
            "android.injected.signing.store.file" => store_file,
            "android.injected.signing.store.password" => store_password,
            "android.injected.signing.key.alias" => key_alias,
            "android.injected.signing.key.password" => key_password,
            "versionCode" => seconds_since_epoch
        }
    end

    gradle(
        task: "assemble",
        build_type: build_type,
        print_command: false,
        properties: properties
    )
end

desc "Uploads the built variant to Crashlytics, notifying the specified group"
desc "group - The Crashlytics group to notify"
def upload_to_crashlytics(group = nil)
    crashlytics(
        api_token: "bf38636d8129c4241adabe227745fe1ac87b1323",
        build_secret: "1387c92a7a7d44ee2543f0a83cf5016931d01dbd332a3aab2902c3083083be9c",
        groups: group
    )
end